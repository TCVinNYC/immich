version: "3.8"

services:
  immich-server:
    image: immich-server:latest
    build:
      context: ../server
      dockerfile: Dockerfile
      target: builder
    command: 
      npm run start:debug immich &&
      npm run start:debug microservices &&
      npm run start:debug web
    volumes:
      - ../server:/usr/src/app
      #- ../server/apps/web:/usr/src/app/web
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /usr/src/app/node_modules
    env_file:
      - .env
    ports:
      - 3000:3000
      - 24678:24678
    environment:
      - NODE_ENV=production
    depends_on:
      - redis
      - database
    restart: always

  # immich-server:
  #   build:
  #     context: ../server
  #     dockerfile: Dockerfile
  #     target: dev
  #   command: npm run start:debug microservices
  #   env_file:
  #     - .env
  #   ports:
  #     - 3000:3000
  #     - 24678:24678
  #   volumes:
  #     - ../server:/usr/src/app
  #     - ${UPLOAD_LOCATION}:/usr/src/app/upload
  #     - /usr/src/app/node_modules
  #   restart: always

  redis:
    container_name: immich_redis
    image: redis:6.2
    restart: always

  database:
    container_name: immich_postgres
    image: postgres:14
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      PG_DATA: /var/lib/postgresql/data
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always

  immich-proxy:
    container_name: immich_proxy
    image: immich-proxy-dev:latest
    build:
      context: ../nginx
      dockerfile: Dockerfile
    ports:
      - 2283:80
      - 2284:443
    logging:
      driver: none
    depends_on:
      - immich-server
    restart: always

volumes:
  pgdata:

  # immich-machine-learning:
  #   image: altran1502/immich-machine-learning:release
  #   entrypoint: ["/bin/sh", "./entrypoint.sh"]
  #   volumes:
  #     - ${UPLOAD_LOCATION}:/usr/src/app/upload
  #   env_file:
  #     - .env
  #   environment:
  #     - NODE_ENV=production
  #   depends_on:
  #     - database
  #   restart: always